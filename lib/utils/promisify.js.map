{"version":3,"sources":["../../src/utils/promisify.js"],"names":[],"mappings":";;;;;kBAEwB,S;;;AAAT,SAAS,SAAT,CAAmB,EAAnB,EAA0C;AAAA,MAAnB,OAAmB,yDAAX,SAAW;;AACvD,MAAM,UAAU,GAAG,IAAH,CAAQ,OAAR,CAAhB;;AAEA,SAAO,UAAC,IAAD,EAAU;AACf,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,cAAQ,IAAR,EAAc,UAAC,GAAD,EAAM,IAAN,EAAe;AAC3B,YAAI,GAAJ,EAAS;AAAE,iBAAO,GAAP;AAAc,SAAzB,MACK;AAAE,kBAAQ,IAAR;AAAgB;AACxB,OAHD;AAID,KALM,CAAP;AAMD,GAPD;AAQD","file":"promisify.js","sourcesContent":["// Wraps a function that takes a callback with the signature `function (error, response)`\n// in a Promise that rejects when `error` is present or resolves with the result of the callback\nexport default function promisify(fn, context=undefined) {\n  const boundFn = fn.bind(context);\n\n  return (data) => {\n    return new Promise((resolve, reject) => {\n      boundFn(data, (err, resp) => {\n        if (err) { reject(err); }\n        else { resolve(resp); }\n      });\n    });\n  }\n}\n"]}