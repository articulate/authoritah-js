{"version":3,"sources":["../../src/dump/saveRules.js"],"names":[],"mappings":";;;;;kBA0BwB,S;;AA1BxB;;;;AACA;;;;AACA;;;;;;AAEA,IAAM,aAAa,SAAb,UAAa,CAAC,IAAD,EAAU;AAAE,SAAO,KAAK,WAAL,GAAmB,OAAnB,CAA2B,KAA3B,EAAkC,GAAlC,CAAP;AAA+C,CAA9E;;AAEA,SAAS,UAAT,CAAoB,GAApB,EAAyB,IAAzB,EAA+B;AAAA,MACrB,MADqB,GACJ,IADI,CACrB,MADqB;AAAA,MACb,IADa,GACJ,IADI,CACb,IADa;;AAE7B,MAAM,OAAU,GAAV,SAAiB,WAAW,IAAX,CAAjB,QAAN;;AAEA,eAAG,aAAH,CAAiB,IAAjB,EAAuB,MAAvB;AACA,SAAO,gBAAE,OAAF,CAAU,gBAAE,KAAF,CAAQ,aAAR,EAAuB,IAAvB,CAAV,EAAwC,gBAAE,MAAF,CAAS,QAAT,CAAxC,EAA4D,IAA5D,CAAP;AACD;;AAED,SAAS,eAAT,CAAyB,GAAzB,EAA8B;AAC5B,MAAI;AACF,iBAAG,SAAH,CAAa,GAAb;AACD,GAFD,CAEE,OAAM,CAAN,EAAS;;AAEV;AACF;;AAED,IAAM,YAAY,gBAAE,MAAF,CAAS,gBAAE,MAAF,CAAS,MAAT,CAAT,EACS,gBAAE,MAAF,CAAS,gBAAE,KAAF,CAAQ,KAAK,SAAb,EAAwB,gBAAE,EAA1B,EAA8B,IAA9B,EAAoC,CAApC,CAAT,CADT,EAES,gBAAE,MAAF,CAAS,iBAAK,IAAd,CAFT,CAAlB;;AAIe,SAAS,SAAT,CAAmB,QAAnB,EAA6B;AAC1C,SAAO,UAAS,OAAT,EAAkB;AAAA,QACf,KADe,GACyB,OADzB,CACf,KADe;AAAA,2BACyB,OADzB,CACR,OADQ;AAAA,QACG,MADH,oBACG,MADH;AAAA,QACW,OADX,oBACW,OADX;;AAEvB,QAAM,SAAS,gBAAE,OAAF,CAAU,UAAV,EAAsB,CAAC,OAAD,CAAtB,CAAf;AACA,QAAM,QAAQ,gBAAE,OAAF,CAAU,gBAAE,OAAF,CAAU,aAAG,aAAb,EAA4B,CAAC,QAAD,CAA5B,CAAV,EAAmD,UAAU,MAAV,CAAnD,CAAd;;AAEA,oBAAgB,OAAhB;;AAEA,WAAO,gBAAE,OAAF,CAAU,KAAV,EAAiB,gBAAE,GAAF,CAAM,MAAN,CAAjB,EAAgC,KAAhC,CAAP;AACD,GARD;AASD","file":"saveRules.js","sourcesContent":["import fs from 'fs'\nimport yaml from 'js-yaml'\nimport R from 'ramda'\n\nconst scriptName = (name) => { return name.toLowerCase().replace(/\\s/g, \"_\") }\n\nfunction saveScript(dir, rule) {\n  const { script, name } = rule;\n  const path = `${dir}/${scriptName(name)}.js`;\n\n  fs.writeFileSync(path, script);\n  return R.compose(R.assoc('script_file', path), R.dissoc('script'))(rule);\n}\n\nfunction ensureScriptDir(dir) {\n  try {\n    fs.mkdirSync(dir);\n  } catch(e) {\n    // ignore\n  }\n}\n\nconst formatter = R.ifElse(R.equals('json'),\n                           R.always(R.curry(JSON.stringify)(R.__, null, 2)),\n                           R.always(yaml.dump));\n\nexport default function saveRules(filename) {\n  return function(context) {\n    const { rules, options: { format, scripts } } = context;\n    const saveTo = R.partial(saveScript, [scripts]);\n    const write = R.compose(R.partial(fs.writeFileSync, [filename]), formatter(format));\n\n    ensureScriptDir(scripts);\n\n    return R.compose(write, R.map(saveTo))(rules);\n  }\n}\n"]}