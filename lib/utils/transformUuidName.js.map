{"version":3,"sources":["../../src/utils/transformUuidName.js"],"names":[],"mappings":";;;;;;;;QASgB,W,GAAA,W;QAYA,W,GAAA,W;;AArBhB;;;;AACA;;;;;;;AAGA,IAAM,cAAc,wDAApB;;;AAGA,IAAM,cAAc,SAAd,WAAc;AAAA,oCAAI,IAAJ;AAAI,QAAJ;AAAA;;AAAA,SAAa,qBAAM,IAAN,EAAY,OAAZ,CAAoB,IAApB,EAA0B,GAA1B,CAAb;AAAA,CAApB;;AAEO,SAAS,WAAT,CAAqB,KAArB,EAA4B;AAAA,MACzB,IADyB,GAChB,KADgB,CACzB,IADyB;;AAAA,iBAEC,gBAAE,KAAF,CAAQ,WAAR,EAAqB,IAArB,CAFD;;AAAA;;AAAA,MAE5B,SAF4B;AAAA,MAEjB,IAFiB;AAAA,MAEX,QAFW;;;AAIjC,MAAG,gBAAE,KAAF,CAAQ,IAAR,CAAH,EAAkB;AAChB,WAAO,YAAY,EAAZ,CAAP;AACA,eAAW,IAAX;AACD;;AAED,SAAO,gBAAE,KAAF,CAAQ,KAAR,EAAe,EAAE,UAAF,EAAQ,MAAM,QAAd,EAAf,CAAP;AACD;;AAEM,SAAS,WAAT,CAAqB,KAArB,EAA4B;AAAA,MAC3B,IAD2B,GACZ,KADY,CAC3B,IAD2B;AAAA,MACrB,IADqB,GACZ,KADY,CACrB,IADqB;;;AAGjC,MAAG,gBAAE,KAAF,CAAQ,IAAR,CAAH,EAAkB;AAAE,WAAO,YAAY,EAAZ,CAAP;AAAyB;;AAE7C,SAAO,gBAAE,OAAF,CAAU,gBAAE,KAAF,CAAQ,MAAR,EAAmB,IAAnB,SAA2B,IAA3B,CAAV,EAA8C,gBAAE,MAAF,CAAS,MAAT,CAA9C,EAAgE,KAAhE,CAAP;AACD","file":"transformUuidName.js","sourcesContent":["import R from 'ramda'\nimport idgen from 'idgen'\n\n// includes legacy UUID format matcher\nconst uuidMatcher = /^([\\w]{8}(?:-[\\w]{4}){3}-[\\w]{12}|[\\w-_]{16})[ -](.+)$/;\n\n// ensure no underscores as Auth0 has some limitations on name conventions\nconst sanitizedId = (...args) => idgen(args).replace(/_/g, '-');\n\nexport function extractUuid(attrs) {\n  const { name } = attrs;\n  let [_original, uuid, namePart] = R.match(uuidMatcher, name);\n\n  if(R.isNil(uuid)) {\n    uuid = sanitizedId(16);\n    namePart = name;\n  }\n\n  return R.merge(attrs, { uuid, name: namePart });\n}\n\nexport function combineUuid(attrs) {\n  let { name, uuid } = attrs;\n\n  if(R.isNil(uuid)) { uuid = sanitizedId(16); }\n\n  return R.compose(R.assoc('name', `${uuid} ${name}`), R.dissoc('uuid'))(attrs);\n}\n"]}