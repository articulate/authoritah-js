{"version":3,"sources":["../../src/auth0/fetchRules.js"],"names":[],"mappings":";;;;;kBAWwB,U;;AAXxB;;;;AACA;;;;;;AAEA,IAAM,SAAS,CACb,eADa,EAEb,eAFa,EAGb,eAHa,EAIb,mBAJa,EAKb,cALa,CAAf;;AAQe,SAAS,UAAT,CAAoB,OAApB,EAA6B;AAAA,MAClC,MADkC,GACvB,OADuB,CAClC,MADkC;;;AAG1C,SAAO,QAAQ,GAAR,CAAY,gBAAE,GAAF,CAAM;AAAA,WAAS,OAAO,KAAP,CAAa,MAAb,CAAoB,EAAE,YAAF,EAApB,CAAT;AAAA,GAAN,EAA+C,MAA/C,CAAZ,EACJ,IADI,CACC,gBAAE,OADH,EAEJ,IAFI,CAEC,gBAAE,KAAF,CAAQ,OAAR,EAAiB,gBAAE,EAAnB,EAAuB,OAAvB,CAFD,EAGJ,IAHI,sBAAP;AAID","file":"fetchRules.js","sourcesContent":["import R from 'ramda'\nimport parseRules from './parseRules'\n\nconst STAGES = [\n  'login_success',\n  'login_failure',\n  'pre_authorize',\n  'user_registration',\n  'user_blocked',\n];\n\nexport default function fetchRules(context) {\n  const { client } = context;\n\n  return Promise.all(R.map(stage => client.rules.getAll({ stage }), STAGES))\n    .then(R.flatten)\n    .then(R.assoc('rules', R.__, context))\n    .then(parseRules)\n}\n"]}