{"version":3,"sources":["../../src/apply/diff.js"],"names":[],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAM,iBAAiB;AACrB,SAAO,gBAAE,IAAF,CAAO,CAAC,QAAD,EAAW,OAAX,EAAoB,SAApB,EAA+B,MAA/B,CAAP,CADc;AAErB,eAAa,gBAAE,IAAF,CAAO,CAAC,MAAD,EAAS,SAAT,EAAoB,UAApB,CAAP;AAFQ,CAAvB;;AAKA,SAAS,eAAT,CAAyB,KAAzB,EAAgC;AAC9B,MAAM,WAAW,eAAe,KAAf,CAAjB;AACA,SAAO,UAAS,GAAT,EAAc,GAAd,EAAmB;AACxB,WAAO,gBAAE,MAAF,CAAS,SAAS,GAAT,CAAT,EAAwB,SAAS,GAAT,CAAxB,CAAP;AACD,GAFD;AAGD;;AAED,IAAM,YAAY,SAAZ,SAAY,CAAC,GAAD,EAAM,GAAN;AAAA,SAAc,gBAAE,GAAF,CAAM,GAAN,EAAW,GAAX,CAAd;AAAA,CAAlB;AACA,IAAM,YAAY,SAAZ,SAAY,CAAC,KAAD;AAAA,SAAW,gBAAE,IAAF,CAAO,SAAP,EAAkB,gBAAE,UAAF,CAAa,gBAAgB,KAAhB,CAAb,CAAlB,CAAX;AAAA,CAAlB;;AAEA,IAAM,cAAc,gBAAE,OAAF,CAAU,gBAAE,OAAF,CAAU,gBAAE,IAAF,CAAO,MAAP,CAAV,CAAV,EAAqC,gBAAE,MAAvC,CAApB;AACA,IAAM,cAAc,SAAd,WAAc,CAAC,KAAD;AAAA,SAAW,gBAAE,MAAF,CAAS,gBAAE,KAAF,CAAQ,UAAU,KAAV,CAAR,CAAT,CAAX;AAAA,CAApB;AACA,IAAM,aAAa,gBAAE,cAAF,CAAiB,gBAAE,OAAF,CAAU,MAAV,CAAjB,CAAnB;AACA,IAAM,sBAAsB,SAAtB,mBAAsB,CAAC,KAAD;AAAA,SAAW,gBAAE,OAAF,CAAU,gBAAE,MAAZ,EAAoB,gBAAE,GAAF,CAAM,gBAAE,QAAR,CAApB,EAAuC,YAAY,KAAZ,CAAvC,EAA2D,WAA3D,CAAX;AAAA,CAA5B;;AAEA,SAAS,IAAT,CAAc,KAAd,EAAqB,OAArB,EAA8B;AAAA,MACC,KADD,GAC2C,OAD3C,CACpB,QADoB,CACP,KADO;AAAA,MACmB,MADnB,GAC2C,OAD3C,CACW,KADX;AAAA,MACkC,EADlC,GAC2C,OAD3C,CAC2B,GAD3B,CACkC,EADlC;;;AAG5B,MAAM,OAAO;AACX,aAAS,oBAAoB,KAApB,EAA2B,MAA3B,EAAmC,KAAnC,CADE;AAEX,aAAS,WAAW,MAAX,EAAmB,KAAnB,CAFE;AAGX,UAAM,WAAW,KAAX,EAAkB,MAAlB;AAHK,GAAb;;AAMA,MAAG,gBAAE,GAAF,CAAM,gBAAE,OAAR,EAAiB,gBAAE,MAAF,CAAS,IAAT,CAAjB,CAAH,EAAqC;AAAE,oCAA8B,KAA9B;AAA0C;AACjF,SAAO,gBAAE,SAAF,CAAY,CAAC,MAAD,EAAS,KAAT,CAAZ,EAA6B,IAA7B,EAAmC,OAAnC,CAAP;AACD;;kBAEc,gBAAE,KAAF,CAAQ,IAAR,C","file":"diff.js","sourcesContent":["import R from 'ramda'\n\nconst COMPARE_FIELDS = {\n  rules: R.pick(['script', 'stage', 'enabled', 'name']),\n  connections: R.pick(['name', 'options', 'strategy'])\n};\n\nfunction selectiveEquals(field) {\n  const selector = COMPARE_FIELDS[field];\n  return function(lhs, rhs) {\n    return R.equals(selector(lhs), selector(rhs));\n  }\n}\n\nconst bothExist = (lhs, rhs) => R.and(lhs, rhs);\nconst isChanged = (field) => R.both(bothExist, R.complement(selectiveEquals(field)));\n\nconst groupByUuid = R.compose(R.groupBy(R.prop('uuid')), R.concat);\nconst findChanges = (field) => R.filter(R.apply(isChanged(field)));\nconst difference = R.differenceWith(R.eqProps('uuid'));\nconst changedIntersection = (field) => R.compose(R.values, R.map(R.mergeAll), findChanges(field), groupByUuid);\n\nfunction diff(field, context) {\n  const { manifest: { [field]: local }, [field]: server, say: { ok } } = context;\n\n  const diff = {\n    changes: changedIntersection(field)(server, local),\n    removes: difference(server, local),\n    adds: difference(local, server)\n  };\n\n  if(R.all(R.isEmpty, R.values(diff))) { ok(`No changes to apply for ${field}!`); }\n  return R.assocPath(['diff', field], diff, context);\n}\n\nexport default R.curry(diff);\n"]}