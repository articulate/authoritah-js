{"version":3,"sources":["../../src/jwt/generateJWT.js"],"names":[],"mappings":";;;;;kBAkBwB,W;;AAlBxB;;;;AACA;;;;;;AAEA,IAAM,aAAa;AACjB,WAAS,CACP,MADO,EAEP,QAFO,EAGP,QAHO,EAIP,QAJO;AADQ,CAAnB;;AASA,IAAM,gBAAgB;AACpB,SAAO,UADa;AAEpB,WAAS,UAFW;AAGpB,eAAa;AAHO,CAAtB;;AAMe,SAAS,WAAT,CAAqB,OAArB,EAA8B;AAAA,MAEzC,MAFyC,GAQvC,OARuC,CAEzC,MAFyC;AAAA,yBAQvC,OARuC,CAGzC,OAHyC;AAAA,MAIvC,MAJuC,oBAIvC,MAJuC;AAAA,MAKvC,GALuC,oBAKvC,GALuC;AAAA,MAMvC,OANuC,oBAMvC,OANuC;;;AAU3C,MAAM,SAAS,OAAO,OAAO,KAAP,CAAa,WAAb,EAA0B,GAA1B,CAAtB;AACA,MAAM,YAAY,UAAU,OAAO,KAAP,CAAa,cAAb,EAA6B,MAA7B,CAA5B;;AAEA,MAAG,OAAH,EAAY;AAAE,WAAO,MAAP,CAAc,eAAd,EAA+B,SAA/B;AAA4C;;AAE1D,MAAM,YAAY,OAAO,MAAP,CAAc,eAAd,EAA+B,KAAK,GAAL,EAA/B,CAAlB;AACA,MAAM,MAAM,OAAO,MAAP,CAAc,SAAd,EAAyB,iBAAO,WAAP,CAAmB,EAAnB,EAAuB,QAAvB,CAAgC,KAAhC,CAAzB,CAAZ;AACA,MAAM,gBAAgB,OAAO,IAAP,CAAY,SAAZ,EAAuB,QAAvB,CAAtB;;AAEA,SAAO,uBAAI,IAAJ,CAAS;AACd,SAAK,MADS;AAEd,YAAQ,aAFM;AAGd,SAAK,SAHS;AAId,SAAK;AAJS,GAAT,EAKJ,aALI,CAAP;AAMD","file":"generateJWT.js","sourcesContent":["import crypto from 'crypto'\nimport jwt from 'jsonwebtoken'\n\nconst allActions = {\n  actions: [\n    \"read\",\n    \"create\",\n    \"update\",\n    \"delete\"\n  ]\n};\n\nconst DEFAULT_SCOPE = {\n  rules: allActions,\n  clients: allActions,\n  connections: allActions,\n};\n\nexport default function generateJWT(context) {\n  const {\n    config,\n    options: {\n      secret,\n      key,\n      refresh,\n    }\n  } = context;\n\n  const apiKey = key || config.orGet('auth0.key', key);\n  const apiSecret = secret || config.orGet('auth0.secret', secret);\n\n  if(refresh) { config.remove('jwt.createdAt', 'jwt.uid'); }\n\n  const createdAt = config.getset('jwt.createdAt', Date.now());\n  const uid = config.getset('jwt.uid', crypto.randomBytes(16).toString('hex'));\n  const decodedSecret = Buffer.from(apiSecret, 'base64');\n\n  return jwt.sign({\n    aud: apiKey,\n    scopes: DEFAULT_SCOPE,\n    iat: createdAt,\n    jti: uid,\n  }, decodedSecret);\n}\n"]}