{"version":3,"sources":["../../src/config/configManager.js"],"names":[],"mappings":";;;;;kBAsBwB,a;;AAtBxB;;;;AACA;;;;;;AAEA,IAAM,eAAe,kBAArB;;AAEA,SAAS,KAAT,CAAe,UAAf,EAA2B;AACzB,MAAI;AACF,QAAI,MAAM,aAAG,YAAH,CAAgB,UAAhB,CAAV;AACA,WAAO,KAAK,KAAL,CAAW,GAAX,CAAP;AACD,GAHD,CAGE,OAAM,CAAN,EAAS;;AAET,WAAO,EAAP;AACD;AACF;;AAED,SAAS,SAAT,CAAmB,MAAnB,EAA2B,UAA3B,EAAuC;AACrC,MAAM,UAAU,KAAK,SAAL,CAAe,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAhB;;AAEA,eAAG,aAAH,CAAiB,UAAjB,EAA6B,OAA7B;AACA,SAAO,MAAP;AACD;;AAEc,SAAS,aAAT,GAA4C;AAAA,MAArB,IAAqB,yDAAd,YAAc;;AACzD,MAAI,SAAS,MAAM,IAAN,CAAb;;AAEA,MAAM,MAAM,SAAN,GAAM,CAAC,GAAD,EAAM,KAAN,EAAgB;AAC1B,WAAO,GAAP,IAAc,KAAd;;AAEA,cAAU,MAAV,EAAkB,IAAlB;AACA,WAAO,KAAP;AACD,GALD;;AAOA,SAAO;AACL,kBADK;AAEL,YAFK;AAGL,OAHK,eAGD,GAHC,EAG8B;AAAA,UAA1B,YAA0B,yDAAX,SAAW;;AACjC,aAAO,gBAAE,SAAF,CAAY,YAAZ,EAA0B,OAAO,GAAP,CAA1B,CAAP;AACD,KALI;AAOL,QAPK,kBAOW;AAAA,wCAAR,MAAQ;AAAR,cAAQ;AAAA;;AACd,aAAO,gBAAE,IAAF,CAAO,MAAP,EAAe,MAAf,CAAP;AACD,KATI;AAWL,SAXK,iBAWC,GAXD,EAWM,YAXN,EAWoB;AACvB,aAAO,gBAAE,SAAF,CAAY,OAAO,GAAP,CAAZ,EAAyB,YAAzB,CAAP;AACD,KAbI;AAeL,SAfK,iBAeC,UAfD,EAea;AAChB,aAAO,gBAAE,SAAF,CAAY,gBAAE,SAAd,EAAyB,UAAzB,EAAqC,gBAAE,IAAF,CAAO,gBAAE,IAAF,CAAO,UAAP,CAAP,EAA2B,MAA3B,CAArC,CAAP;AACD,KAjBI;AAmBL,SAnBK,mBAmBG;AACN,WAAI,IAAI,GAAR,IAAe,MAAf,EAAsB;AACpB,gBAAQ,GAAR,CAAe,GAAf,SAAsB,OAAO,GAAP,CAAtB;AACD;AACF,KAvBI;AAyBL,QAzBK,gBAyBA,GAzBA,EAyBK;AACR,eAAS,gBAAE,KAAF,CAAQ,MAAR,EAAgB,GAAhB,CAAT;AACA,aAAO,UAAU,MAAV,EAAkB,IAAlB,CAAP;AACD,KA5BI;AA8BL,UA9BK,kBA8BE,GA9BF,EA8BO,YA9BP,EA8BqB;AACxB,UAAI,QAAQ,OAAO,GAAP,CAAZ;AACA,UAAG,gBAAE,KAAF,CAAQ,KAAR,CAAH,EAAmB;AAAE,gBAAQ,IAAI,GAAJ,EAAS,YAAT,CAAR;AAAiC;;AAEtD,aAAO,KAAP;AACD,KAnCI;AAqCL,UArCK,oBAqCW;AAAA,yCAAN,IAAM;AAAN,YAAM;AAAA;;AACd,WAAK,OAAL,CAAa,eAAO;AAClB,eAAO,OAAO,GAAP,CAAP;AACD,OAFD;;AAIA,aAAO,UAAU,MAAV,EAAkB,IAAlB,CAAP;AACD;AA3CI,GAAP;AA6CD","file":"configManager.js","sourcesContent":["import fs from 'fs'\nimport R from 'ramda'\n\nconst DEFAULT_FILE = \".authoritah.json\";\n\nfunction _read(configFile) {\n  try {\n    let raw = fs.readFileSync(configFile);\n    return JSON.parse(raw);\n  } catch(e) {\n    //console.warn(`File ${configFile} not found.`);\n    return {};\n  }\n}\n\nfunction _finalize(config, configFile) {\n  const encoded = JSON.stringify(config, null, 2);\n\n  fs.writeFileSync(configFile, encoded);\n  return config;\n}\n\nexport default function configManager(path = DEFAULT_FILE) {\n  let config = _read(path);\n\n  const set = (key, value) => {\n    config[key] = value;\n\n    _finalize(config, path);\n    return value;\n  };\n\n  return {\n    config,\n    set,\n    get(key, defaultValue = undefined) {\n      return R.defaultTo(defaultValue, config[key]);\n    },\n\n    gets(...keymap) {\n      return R.pick(keymap, config);\n    },\n\n    orGet(key, primaryValue) {\n      return R.defaultTo(config[key], primaryValue);\n    },\n\n    getsd(defaultMap) {\n      return R.mergeWith(R.defaultTo, defaultMap, R.pick(R.keys(defaultMap), config));\n    },\n\n    print() {\n      for(let key in config){\n        console.log(`${key}=${config[key]}`);\n      }\n    },\n\n    sets(obj) {\n      config = R.merge(config, obj);\n      return _finalize(config, path);\n    },\n\n    getset(key, defaultValue) {\n      let value = config[key];\n      if(R.isNil(value)) { value = set(key, defaultValue); }\n\n      return value;\n    },\n\n    remove(...keys) {\n      keys.forEach(key => {\n        delete config[key];\n      });\n\n      return _finalize(config, path);\n    }\n  }\n}\n"]}