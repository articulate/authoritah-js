{"version":3,"sources":["../src/cli.js"],"names":[],"mappings":";;AAAA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAAS,QAAT,CAAkB,GAAlB,EAAuB;AACrB,MAAI,KAAJ,CAAU,yBAAV,EACG,MADH,CACU,gBADV,EAC4B,sBAD5B;;AAGA,SAAO,GAAP;AACD;;AAED,SAAS,eAAT,CAAyB,GAAzB,EAA8B;AAC5B,MAAI,OAAJ,CAAY,OAAZ,EACG,WADH,CACe,oDADf,EAEG,MAFH;;AAIA,SAAO,GAAP;AACD;;AAGD,SAAS,gBAAT,CAA0B,GAA1B,EAA+B;AAC7B,MAAI,OAAJ,CAAY,4BAAZ,EACG,WADH,CACe,yCACA,uBADA,GAEA,UAFA,GAGA,kCAHA,GAIA,sBAJA,GAKA,uBANf,EAOG,MAPH;;AASA,SAAO,GAAP;AACD;;AAED,SAAS,aAAT,CAAuB,GAAvB,EAA4B;AAC1B,MAAI,OAAJ,CAAY,KAAZ,EACG,MADH,CACU,eADV,EAC2B,oBAD3B,EAEG,MAFH,CAEU,iBAFV,EAE6B,uBAF7B,EAGG,MAHH,CAGU,uBAHV,EAGmC,0BAHnC,EAIG,MAJH;;AAMA,SAAO,GAAP;AACD;;AAED,SAAS,cAAT,CAAwB,GAAxB,EAA6B;AAC3B,MAAI,OAAJ,CAAY,iBAAZ,EACG,MADH,CACU,qCADV,EACiD,sCADjD,EACyF,gBADzF,EAEG,MAFH,CAEU,iDAFV,EAE6D,4CAF7D,EAE2G,sBAF3G,EAGG,MAHH,CAGU,uBAHV,EAGmC,6BAHnC,EAIG,MAJH,CAIU,iBAJV,EAI6B,uBAJ7B,EAKG,MALH,CAKU,uBALV,EAKmC,0BALnC,EAMG,MANH,CAMU,sBANV,EAMkC,yBANlC,EAM6D,MAN7D,EAOG,MAPH;;AASA,SAAO,GAAP;AACD;;AAED,SAAS,eAAT,CAAyB,GAAzB,EAA8B;AAC5B,MAAI,OAAJ,CAAY,oBAAZ,EACG,MADH,CACU,uBADV,EACmC,6BADnC,EAEG,MAFH,CAEU,iBAFV,EAE6B,uBAF7B,EAGG,MAHH,CAGU,uBAHV,EAGmC,0BAHnC,EAIG,MAJH;;AAMA,SAAO,GAAP;AACD;;AAED,QAAQ,GAAR,GAAc,UAAC,IAAD,EAAU;AACtB,MAAM,yBAAN;;AAEA,iCACG,IADH,CACQ,IAAI,OAAJ,CAAY,IAAZ,CAAiB,GAAjB,CADR,EAEG,IAFH,CAEQ,QAFR,EAGG,IAHH,CAGQ,eAHR,EAIG,IAJH,CAIQ,gBAJR,EAKG,IALH,CAKQ,aALR,EAMG,IANH,CAMQ,cANR,EAOG,IAPH,CAOQ,eAPR,EAQG,IARH,CAQQ;AAAA,WAAO,IAAI,KAAJ,CAAU,IAAV,CAAP;AAAA,GARR,EASG,KATH,CASS,QAAQ,KATjB;AAUD,CAbD","file":"cli.js","sourcesContent":["import program from 'commander'\n\nimport versionParser from './utils/versionParser'\nimport jwtInterface from './jwt/index'\nimport configInterface from './config/index'\nimport dumpInterface from './dump/index'\nimport applyInterface from './apply/index'\nimport setupInterface from './setup/index'\n\nfunction setupCLI(cli) {\n  cli.usage('[options] <config file>')\n    .option('-C, --no-color', \"Disable color output\");\n\n  return cli;\n}\n\nfunction addSetupCommand(cli) {\n  cli.command('setup')\n    .description('Setup authoritah for use with your Auth0 instance.')\n    .action(setupInterface);\n\n  return cli;\n}\n\n\nfunction addConfigCommand(cli) {\n  cli.command('config <command> [args...]')\n    .description('Manage Authoritah config variables. ' +\n                 'Available commands:\\n' +\n                 '\\tshow\\n' +\n                 '\\tset key=value [key=value...]\\n' +\n                 '\\tget key [key...]\\n' +\n                 '\\tremove key [key...]')\n    .action(configInterface);\n\n  return cli;\n}\n\nfunction addJwtCommand(cli) {\n  cli.command('jwt')\n    .option('-r, --refresh', \"Refresh the token.\")\n    .option('-k, --key <key>', \"The Auth0 domain key.\")\n    .option('-s, --secret <secret>', \"The Auth0 domain secret.\")\n    .action(jwtInterface);\n\n  return cli;\n}\n\nfunction addDumpCommand(cli) {\n  cli.command('dump [filename]')\n    .option('-r, --rule-scripts <./rule_scripts>', \"Folder path to save the rule scripts\", \"./rule_scripts\")\n    .option('-c, --connection-scripts <./connection_scripts>', \"Folder path to save the connection scripts\", \"./connection_scripts\")\n    .option('-d, --domain <domain>', \"Auth0 domain to run against\")\n    .option('-k, --key <key>', \"The Auth0 domain key.\")\n    .option('-s, --secret <secret>', \"The Auth0 domain secret.\")\n    .option('-F --format <format>', \"Format to output rules.\", \"yaml\")\n    .action(dumpInterface);\n\n  return cli;\n}\n\nfunction addApplyCommand(cli) {\n  cli.command('apply [rules file]')\n    .option('-d, --domain <domain>', \"Auth0 domain to run against\")\n    .option('-k, --key <key>', \"The Auth0 domain key.\")\n    .option('-s, --secret <secret>', \"The Auth0 domain secret.\")\n    .action(applyInterface);\n\n  return cli;\n}\n\nexports.cli = (args) => {\n  const cli = program;\n\n  versionParser()\n    .then(cli.version.bind(cli))\n    .then(setupCLI)\n    .then(addSetupCommand)\n    .then(addConfigCommand)\n    .then(addJwtCommand)\n    .then(addDumpCommand)\n    .then(addApplyCommand)\n    .then(cli => cli.parse(args))\n    .catch(console.error);\n}\n"]}