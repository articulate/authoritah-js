{"version":3,"sources":["../../src/auth0/parseRules.js"],"names":[],"mappings":";;;;;kBAqBwB,U;;AArBxB;;;;AAEA,IAAM,QAAQ,CACZ,SADY,EAEZ,OAFY,EAGZ,QAHY,EAIZ,MAJY,EAKZ,IALY,CAAd;;AASA,IAAM,cAAc,SAAd,WAAc,CAAC,QAAD,EAAc;AAAA,wBACH,SAAS,KAAT,CAAe,GAAf,CADG;;AAAA;;AAAA,MACzB,IADyB;;AAAA,MAChB,SADgB;;AAEhC,SAAO,EAAE,UAAF,EAAQ,MAAM,UAAU,IAAV,CAAe,GAAf,CAAd,EAAP;AACD,CAHD;;AAKA,IAAM,YAAY,SAAZ,SAAY,CAAC,KAAD,EAAW;AAAA,MACnB,IADmB,GACV,KADU,CACnB,IADmB;;AAE3B,SAAO,kBAAM,KAAN,EAAa,YAAY,IAAZ,CAAb,CAAP;AACD,CAHD;;AAKe,SAAS,UAAT,CAAoB,OAApB,EAA6B;AAAA,MAClC,KADkC,GACxB,OADwB,CAClC,KADkC;;AAE1C,MAAM,SAAS,gBAAI,oBAAQ,SAAR,EAAmB,iBAAK,KAAL,CAAnB,CAAJ,EAAqC,KAArC,CAAf;;AAEA,SAAO,kBAAM,OAAN,EAAe,MAAf,EAAuB,OAAvB,CAAP;AACD","file":"parseRules.js","sourcesContent":["import { merge, pick, map, compose, assoc } from 'ramda';\n\nconst ATTRS = [\n  'enabled',\n  'stage',\n  'script',\n  'name',\n  'id',\n];\n\n\nconst extractName = (uuidName) => {\n  const [uuid, ...nameParts] = uuidName.split(' ');\n  return { uuid, name: nameParts.join(' ') };\n};\n\nconst transform = (attrs) => {\n  const { name } = attrs;\n  return merge(attrs, extractName(name));\n};\n\nexport default function parseRules(context) {\n  const { rules } = context;\n  const parsed = map(compose(transform, pick(ATTRS)), rules);\n\n  return assoc('rules', parsed, context);\n}\n"]}